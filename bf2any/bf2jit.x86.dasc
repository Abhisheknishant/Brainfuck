/*  As I can't use #defines to control the assembler this file is assembled
 *  twice, once for i386 and once for amd64
 *
 *  The C compiler then includes one to match the current compile.
 */

/*
 *  The "actionlist" command defines the name of the data blob that
 *  the first pass of the assembler will use to pass it's data to the
 *  runtime pass.
 *
 *  The "globals" command defines the prefix used for the data structure
 *  to store 'global label' numbers
 *
 *  You can have multiple code sections, eg: for library routines. But in
 *  general you probably won't need to as you can probably run over your
 *  parse tree in the 'right' order.
 */

|.if I386
|.arch x86
|.else
|.arch x64
|.endif
|.actionlist actions
|.section code
|.globals GLOB_

/*  Using 32 bit working registers for both 32 and 64 bit. The REG_P register
 *  is 64 bit on x64 so that the memory can be malloc'd beyond the 2GB limit.
 *
 *  Function pointers for getchar and putchar are used assuming that the
 *  program has been compiled with -mcmodel=large so that it won't break.
 */

|.if I386
|.define REG_P, esi
|.define REG_A, eax
|.define REG_AL, al
|.define REG_B, ebx
|.define REG_BL, bl
|.define REG_C, ecx
|.else
|.define REG_P, r15
|.define REG_A, eax
|.define REG_AL, al
|.define REG_B, ebx
|.define REG_BL, bl
|.define REG_C, ecx
|.define PRM, rdi
|.endif

/* The state of the assembler at run time. Note that the 'Dst' name is
 * hardcoded into the lua generation script. If you want to have multiple
 * states available you must redefine this identifier. It is not safe
 * to put any _code_generating_ assembly before this point. */
#define Dst &Dstate
dasm_State *Dstate;

/* These are the named global labels prefixed in the assembler by the "->"
 * sequence. The "GLOB_" prefix is from the .globals identifier above.
 * Each label can only appear once in the generated machine code.
 */
void* global_labels[GLOB__MAX];

/* A stack for a pair of labels for each open while loop. */
struct stkdat { struct stkdat * up; int id; } *sp = 0;
/* This is the highest allocated dynamically generated label number */
int maxpc = 0;

static int acc_loaded = 0;
static int acc_offset = 0;
static int acc_dirty = 0;
static int acc_hi_dirty = 0;

/* Make sure REG_A has been written out to the tape */
static void
clean_acc(void)
{
    if (acc_loaded && acc_dirty) {
	if (tape_step > 1) {
	    if (acc_offset) {
		| mov [REG_P+acc_offset * tape_step], REG_A
	    } else {
		| mov [REG_P], REG_A
	    }
	} else {
	    if (acc_offset) {
		| mov byte [REG_P+acc_offset], REG_AL
	    } else {
		| mov byte [REG_P], REG_AL
	    }
	}

	acc_dirty = 0;
    }
}

/* Set REG_A to contain the contents of tape cell "offset" but DO NOT read the
 * current value from the tape.
 * Save anything that was in REG_A before if needed.
 */
static void
set_acc_offset(int offset)
{
    if (acc_loaded && acc_dirty && acc_offset != offset)
	clean_acc();

    acc_offset = offset;
    acc_loaded = 1;
    acc_dirty = 1;
    acc_hi_dirty = 1;
}

/* Load the tape cell "offset" into REG_A, save anything that was in
 * REG_A before if needed.
 */
static void
load_acc_offset(int offset)
{
    if (acc_loaded) {
	if (acc_offset == offset) return;
	if (acc_dirty)
	    clean_acc();
    }

    acc_offset = offset;
    if (tape_step > 1) {
	if (acc_offset) {
	    | mov REG_A, [REG_P+acc_offset*tape_step]
	} else {
	    | mov REG_A, [REG_P]
	}
    } else {
	if (acc_offset) {
	    | movzx REG_A, byte [REG_P+acc_offset]
	} else {
	    | movzx REG_A, byte [REG_P]
	}
    }

    acc_loaded = 1;
    acc_dirty = 0;
    acc_hi_dirty = 0; // (tape_step*8 != cell_size);
}

/* Called from the front end as normal */
void
outcmd(int ch, int count)
{
    switch(ch) {
    case '!':
	/*  dasm_init sets up the Dst data structure, the second argument is
	 *  the number of code sections used by the ".section" command, I
	 *  only need one. */
	dasm_init(Dst, 1);

	/*  This is some boilerplate for the "->" global names, after
	 *  the function dasm_encode is called the 'global_labels'
	 *  array will have pointers to these labels. For example the
	 *  start label below is in global_labels[GLOB_start]
	 */
	dasm_setupglobal(Dst, global_labels, GLOB__MAX);

	/* Link up the C library to the generated blob of assembled data */
	dasm_setup(Dst, actions);

	if (bytecell) tape_step = 1; else tape_step = sizeof(int);

        /* Create Stack frame. */
	| ->start:
	|.if I386
	| push ebp
	| push edi
	| push esi
	| push ebx
        | mov  ebp, esp
	|
	| mov  REG_P, dword [ebp+20]
	|.else
        | push rbp
        | push r15
        | push r14
        | push r13
        | push r12
        |
        | mov  rbp, rsp
        | sub  rsp, 64 // Some shadow space for Windows.
        |
        | mov  REG_P, PRM
	|.endif
	break;

    case '=':
	set_acc_offset(0);
	if (count == 0) {
	    | xor REG_A, REG_A
	} else {
	    | mov REG_A, count
	}
	break;

    case 'B':
	load_acc_offset(0);
	if (bytecell && acc_hi_dirty) {
	    | and REG_A, 0xFF
	    acc_hi_dirty = 0;
	}
	| mov REG_B,REG_A
	break;

    case 'M':
	load_acc_offset(0);
	set_acc_offset(0);
	| imul REG_C,REG_B,count
	| add REG_A,REG_C
	break;

    case 'N':
	load_acc_offset(0);
	set_acc_offset(0);
	if (count != 1) {
	    | imul REG_C,REG_B,count
	    | sub REG_A,REG_C
	} else {
	    | sub REG_A,REG_B
	}
	break;

    case 'S':
	load_acc_offset(0);
	set_acc_offset(0);
	| add REG_A,REG_B
	break;

    case 'Q':
	if (bytecell) {
	    | cmp   REG_BL, 0
	    | jz   >1
	} else {
	    | cmp   REG_B, 0
	    | jz   >1
	}
	if (acc_loaded && acc_offset == 0) {
	    set_acc_offset(0);
	    | mov REG_A, count
	} else {
	    if (tape_step > 1) {
		| mov dword [REG_P], count
	    } else {
		| mov byte [REG_P], count
	    }
	}
	| 1:
	break;

    case 'm':
	if (bytecell) {
	    | cmp   REG_BL, 0
	    | jz   >1
	} else {
	    | cmp   REG_B, 0
	    | jz   >1
	}
	load_acc_offset(0);
	set_acc_offset(0);
	| imul REG_C,REG_B,count
	| add REG_A,REG_C
	clean_acc();
	acc_loaded = 0;
	| 1:
	break;

    case 'n':
	if (bytecell) {
	    | cmp   REG_BL, 0
	    | jz   >1
	} else {
	    | cmp   REG_B, 0
	    | jz   >1
	}
	load_acc_offset(0);
	set_acc_offset(0);
	if (count != 1) {
	    | imul REG_C,REG_B,count
	    | sub REG_A,REG_C
	} else {
	    | sub REG_A,REG_B
	}
	clean_acc();
	acc_loaded = 0;
	| 1:
	break;

    case 's':
	if (bytecell) {
	    | cmp   REG_BL, 0
	    | jz   >1
	} else {
	    | cmp   REG_B, 0
	    | jz   >1
	}
	load_acc_offset(0);
	set_acc_offset(0);
	| add REG_A,REG_B
	clean_acc();
	acc_loaded = 0;
	| 1:
	break;

    case '+':
	load_acc_offset(0);
	set_acc_offset(0);
	| add REG_A, count
	break;

    case '-':
	load_acc_offset(0);
	set_acc_offset(0);
	| sub REG_A, count
	break;

    case '>':
	clean_acc();
	if (acc_loaded) acc_offset -= count;
	| add REG_P, count*tape_step
	break;

    case '<':
	clean_acc();
	if (acc_loaded) acc_offset += count;
	| sub REG_P, count*tape_step
	break;

    case '[':
	{
	    struct stkdat * n = malloc(sizeof*n);
	    n->up = sp;
	    sp = n;

	    maxpc += 2;
	    n->id = maxpc;

	    dasm_growpc(Dst, maxpc);

	    load_acc_offset(0);
	    clean_acc();
	    if (bytecell) {
		| cmp   REG_AL, 0
	    } else {
		| cmp   REG_A, 0
	    }
	    | jz   =>(maxpc-2)
	    | =>(maxpc-1):

	    /* The "=>" style labels are the most useful form, they give you
	     * an indefinite set of normal labels for use as jump targets.
	     * You MUST allocate space for a label with "dasm_growpc" before
	     * you process the assembler that references it.
	     */
	}
	break;

    case ']':
	{
	    struct stkdat * n = sp;
	    int setpc;
	    sp = n->up;
	    setpc = n->id;
	    free(n);

	    load_acc_offset(0);
	    clean_acc();
	    if (bytecell) {
		| cmp   REG_AL, 0
	    } else {
		| cmp   REG_A, 0
	    }
	    | jne   =>(setpc-1)
	    | =>(setpc-2):
	}
	break;

    case ',':
	/* Note: REG_A must be eax/rax */
	clean_acc();
	set_acc_offset(0);
	|.if I386
	| call &getchar
	|.else
	| mov64 rax, (uintptr_t) getchar
	| call  rax
	|.endif
	| cmp   REG_A, -1
	| jz >1
	clean_acc();
	acc_loaded = 0;
	| 1:

	/* The ">1" and "1:" are local labels where you can jump forward or
	 * backward to (only) the next label with that number.
	 *
	 * Unfortunatly there are only ten of these so I could not use them
	 * for the main while() loop processing as I've done in the bf2gas
	 * generator.
	 */
	break;

    case '.':
	clean_acc();
	load_acc_offset(0);
	if (bytecell && acc_hi_dirty) {
	    | and REG_A, 0xFF
	}
	acc_loaded = 0;
	|.if I386
	| movzx eax, byte [REG_P]
	| push eax
	| call &putchar
	| pop eax
	|.else
	| movzx PRM, byte [REG_P]
	| mov64 rax, (uintptr_t) putchar
	| call  rax
	|.endif
	break;

    case '~':
	|.if I386
        | xor eax, eax
        | mov esp, ebp
	| pop ebx
	| pop esi
	| pop edi
        | pop ebp
	|.else
        | xor rax, rax
        | mov rsp, rbp
        | pop r12
        | pop r13
        | pop r14
        | pop r15
        | pop rbp
	|.endif
        | ret

	link_and_run(Dst);
	break;
    }
}
