#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdint.h>
#include <fcntl.h>
#if !defined(LEGACYOS) && !defined(_WIN32)
#include <sys/mman.h>
#elif defined(_WIN32)
# include <windows.h>
#endif

#include "bfi.tree.h"
#include "bfi.dasm.h"
#include "bfi.run.h"
#include "clock.h"

#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_x86.h"

static int dump_code = 0;

int
checkarg_dynasm(char * opt, char * arg UNUSED)
{
    if (!strcmp(opt, "-dump")) {
	dump_code = 1;
	return 1;
    }
    return 0;
}

#if defined(__x86_64__) || defined(__amd64__) || defined(_M_AMD64)
#define CPUCHECK 64
#elif defined(__i386__) || defined(_M_IX86)
#define CPUCHECK 32
#else
#warning "Supported processor not detected for DYNASM."
#define CPUCHECK 0
#endif

/*
 *  Notes: It is possibly to use #if commands, but the assembler (pass1)
 *  will see ALL the lines of assembly irrespective of these directives;
 *  therefor no '.define' commands within a '#ifdef'.
 *
 *  The same applies the other way round, the assembler treats lines that
 *  don't begin with a '|' character as untouchable and emits them all.
 *
 *  BUT, any line that begins with '||' is an assembler line which the
 *  assembler will filter with .if directives and the contents of this
 *  line (after the '||') are passed into the C source AFTER token
 *  substitution.
 */

|.if I386
||#define CPUID "i686"
||int dynasm_ok = (CPUCHECK==32);
|.arch x86
|.else
||#define CPUID "x86_64"
||int dynasm_ok = (CPUCHECK==64);
|.arch x64
|.endif

|.actionlist actions
|.section code
|.globals GLOB_

/*  Using 32 bit working registers for both 32 and 64 bit. The REG_P register
 *  is 64 bit on x64 so that the memory can be malloc'd beyond the 2GB limit.
 *
 *  Function pointers are used assuming that the program has been compiled
 *  with -mcmodel=large so that all models will work.
 */

|.if I386
|.define REG_P, esi
|.define REG_A, eax
|.define REG_AL, al
|.define REG_B, ebx
|.define REG_BL, bl
|.define REG_C, ecx
|.define REG_Z, edi
|.else
|.define REG_P, r15
|.define REG_A, eax
|.define REG_AL, al
|.define REG_B, edx
|.define REG_BL, dl
|.define REG_C, ecx
|.define REG_Z, ebx
/* Windows is, of course, different.
 * This time it may not even be Microsoft's fault!?!? */
|.define PRM, rdi
|.define PRM_D, edi
|.endif

#define Dst &Dstate
dasm_State *Dstate;
void* global_labels[GLOB__MAX];
int maxpc = 0;
struct stkdat { struct stkdat * up; int id; } *sp = 0;

static void link_and_run(dasm_State **state);
static void failout(void) __attribute__ ((__noreturn__));

static void failout(void) { fprintf(stderr, "STOP Command executed.\n"); exit(1); }

static int acc_loaded = 0;
static int acc_offset = 0;
static int acc_dirty = 0;
static int acc_hi_dirty = 0;
static int tape_step = 0;

static void
clean_acc(void)
{
    if (acc_loaded && acc_dirty) {
	if (tape_step > 1) {
	    if (acc_offset) {
		| mov [REG_P+acc_offset * tape_step], REG_A
	    } else {
		| mov [REG_P], REG_A
	    }
	} else {
	    if (acc_offset) {
		| mov byte [REG_P+acc_offset], REG_AL
	    } else {
		| mov byte [REG_P], REG_AL
	    }
	}

	acc_dirty = 0;
    }
}

static void
set_acc_offset(int offset)
{
    if (acc_loaded && acc_dirty && acc_offset != offset)
	clean_acc();

    acc_offset = offset;
    acc_loaded = 1;
    acc_dirty = 1;
    acc_hi_dirty = 1;
}

static void
load_acc_offset(int offset)
{
    if (acc_loaded) {
	if (acc_offset == offset) return;
	if (acc_dirty)
	    clean_acc();
    }

    acc_offset = offset;
    if (tape_step > 1) {
	if (acc_offset) {
	    | mov REG_A, [REG_P+acc_offset*tape_step]
	} else {
	    | mov REG_A, [REG_P]
	}
    } else {
	if (acc_offset) {
	    | movzx REG_A, byte [REG_P+acc_offset]
	} else {
	    | movzx REG_A, byte [REG_P]
	}
    }

    acc_loaded = 1;
    acc_dirty = 0;
    acc_hi_dirty = (tape_step*8 != cell_size);
}

void
run_dynasm(void)
{
    struct bfi * n = bfprog;

    if (cell_size == 8) tape_step = 1; else
    tape_step = sizeof(int);

    if (total_nodes > 2000000) {
	if (verbose)
	    fprintf(stderr, "WARNING: "
	                    "DynASM is limited to 16Mbyte of code space, "
			    "Switching to profiling interpreter.\n");
	run_tree();
	return;
    }

    dasm_init(Dst, 1);
    dasm_setupglobal(Dst, global_labels, GLOB__MAX);
    dasm_setup(Dst, actions);

    /* Create Stack frame. */
    | ->start:
    |.if I386
    | push ebp
    | push edi
    | push esi
    | push ebx
    | mov  ebp, esp
    |
    | mov  REG_P, dword [ebp+20]
    |.else
    | push rbp
    | push r15
    | push r14
    | push r13
    | push rbx
    |
    | mov  rbp, rsp
    | sub  rsp, 64 // Some shadow space for Windows (if this is ever ported).
    |
#ifndef _WIN32
    | mov  REG_P, PRM
#else
    | mov  REG_P, rcx
#endif
    |.endif
    | xor  REG_Z, REG_Z

    while(n)
    {
	int count = n->count;
	int offset = n->offset;

	switch(n->type)
	{
	case T_MOV:
	    clean_acc();
	    if (acc_loaded) acc_offset -= count;
	    | add REG_P, count*tape_step
	    break;

        case T_ADD:
	    load_acc_offset(offset);
	    set_acc_offset(offset);
	    if ((count != 128 && count >= 0) || count <= -128) {
		| add REG_A, count
	    } else {
		| sub REG_A, -count
	    }
	    break;

	case T_SET:
	    set_acc_offset(offset);
	    if (count == 0) {
		| xor REG_A, REG_A
#if 0
	    } else if (count >= -128 && count < 128) {
		| lea REG_A, [REG_Z+count]
#endif
	    } else {
		| mov REG_A, count
	    }
	    break;

	case T_CALC:
	    if (n->count2 != 0) {
		int count2 = n->count2;
		load_acc_offset(n->offset2);
		set_acc_offset(offset);

		if (count2 == -2 || count2 == -3 || count2 == -5) {
		    | neg REG_A
		    count2 = -count2;
		}

		if (count2 == -1) {
		    | neg REG_A
		} else if (count2 == 2) {
		    | add REG_A, REG_A
		} else if (count2 == 3) {
		    | lea REG_A, [REG_A+REG_A*2]
		} else if (count2 == 3) {
		    | lea REG_A, [REG_A+REG_A*2]
		} else if (count2 == 5) {
		    | lea REG_A, [REG_A+REG_A*4]
		} else if (count2 == 6) {
		    | lea REG_A, [REG_A+REG_A*2]
		    | add REG_A, REG_A
		} else if (count2 == 10) {
		    | lea REG_A, [REG_A+REG_A*4]
		    | add REG_A, REG_A
		} else if (count2 != 1) {
		    | imul REG_A, REG_A, (count2)
		}
	    } else {
		fprintf(stderr, "Warning: T_CALC with count2 == 0 !?\n");
		set_acc_offset(offset);
		| xor REG_A, REG_A
	    }

	    if (n->count3 != 0) {
		int count3 = n->count3;

		if (tape_step > 1) {
		    | mov REG_B, [REG_P+ (n->offset3*tape_step) ]
		} else {
		    | movzx REG_B, byte [REG_P+ (n->offset3) ]
		}

		if (count3 == -2 || count3 == -3 || count3 == -5) {
		    | neg REG_B
		    count3 = -count3;
		}

		if (count3 == -1) {
		    | neg REG_B
		} else if (count3 == 2) {
		    | add REG_B, REG_B
		} else if (count3 == 3) {
		    | lea REG_B, [REG_B+REG_B*2]
		} else if (count3 == 5) {
		    | lea REG_B, [REG_B+REG_B*4]
		} else if (count3 == 6) {
		    | lea REG_B, [REG_B+REG_B*2]
		    | add REG_B, REG_B
		} else if (count3 == 10) {
		    | lea REG_B, [REG_B+REG_B*4]
		    | add REG_B, REG_B
		} else if (count3 != 1) {
		    | imul REG_B, REG_B, (count3)
		}
		| add REG_A, REG_B
	    }

	    if (n->count) {
		| add REG_A, count
	    }

	    break;

	case T_IF:
	case T_WHL: case T_MULT: case T_CMULT: case T_FOR:
	    load_acc_offset(n->offset);
	    clean_acc();

	    if (cell_mask > 0 && acc_hi_dirty) {
		if (cell_mask != 0xFF || tape_step != 1) {
		    | and REG_A, cell_mask
		}
	    }

	    n->jmp->count = maxpc;
	    maxpc += 2;
	    dasm_growpc(Dst, maxpc);

	    if (tape_step == 1) {
                | cmp   REG_AL, 0
	    } else {
		| cmp   REG_A, 0
	    }

	    | jz   =>(n->jmp->count)
	    | =>(n->jmp->count + 1):
	    break;

	case T_END:
	    load_acc_offset(n->offset);
	    clean_acc();

	    if (cell_mask > 0 && acc_hi_dirty) {
		if (cell_mask != 0xFF || tape_step != 1) {
		    | and REG_A, cell_mask
		}
	    }

	    if (tape_step == 1) {
                | cmp   REG_AL, 0
	    } else {
		| cmp   REG_A, 0
	    }

	    | jnz   =>(n->count + 1)
	    | =>(n->count):

	case T_ENDIF:
	    clean_acc();
	    acc_loaded = 0;

	    | =>(n->count):
	    break;


	case T_PRT:
	    clean_acc();
	    load_acc_offset(offset);
	    acc_loaded = 0;

	    |.if I386
	    | push REG_A
	    | call &putch
	    | pop eax
	    |.else
#ifndef _WIN32
	    | mov PRM_D, REG_A
#else
	    | mov REG_C, REG_A
#endif
#ifdef __code_model_small__
	    | mov   eax, (uintptr_t) putch
#else
	    | mov64 rax, (uintptr_t) putch
#endif
	    | call  rax
	    |.endif
	    break;

	case T_CHR:
	    clean_acc();
	    /* TODO: Strings */
	    acc_loaded = 0;
	    if (count >= -128 && count < 128) {
		| lea REG_A, [REG_Z+count]
	    } else {
		| mov REG_A, (count)
	    }
	    |.if I386
	    | push REG_A
	    | call &putch
	    | pop eax
	    |.else
#ifndef _WIN32
	    | mov PRM_D, REG_A
#else
	    | mov REG_C, REG_A
#endif
#ifdef __code_model_small__
	    | mov   eax, (uintptr_t) putch
#else
	    | mov64 rax, (uintptr_t) putch
#endif
	    | call  rax
	    |.endif
	    break;

	case T_INP:
	    load_acc_offset(offset);
	    set_acc_offset(offset);

	    |.if I386
	    | push REG_A
	    | call &getch
	    | pop REG_B
	    |.else
#ifndef _WIN32
	    | mov PRM_D, REG_A
#else
	    | mov REG_C, REG_A
#endif
#ifdef __code_model_small__
	    | mov   eax, (uintptr_t) getch
#else
	    | mov64 rax, (uintptr_t) getch
#endif
	    | call  rax
	    |.endif
	    /* Note: REG_A must be eax/rax */
	    break;

	case T_STOP:
	    |.if I386
	    | call &failout
	    |.else
#ifdef __code_model_small__
	    | mov   eax, (uintptr_t) failout
#else
	    | mov64 rax, (uintptr_t) failout
#endif
	    | call  rax
	    |.endif
	    break;

	default:
	    fprintf(stderr, "Code gen error: "
		    "%s\t"
		    "%d:%d, %d:%d, %d:%d\n",
		    tokennames[n->type],
		    n->offset, n->count,
		    n->offset2, n->count2,
		    n->offset3, n->count3);
	    exit(1);
	}
	n=n->next;
    }

    |->endcode:
    |.if I386
    | xor eax, eax
    | mov esp, ebp
    | pop ebx
    | pop esi
    | pop edi
    | pop ebp
    |.else
    | xor rax, rax
    | mov rsp, rbp
    | pop rbx
    | pop r13
    | pop r14
    | pop r15
    | pop rbp
    |.endif
    | ret

    link_and_run(Dst);
}


#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#endif
#ifndef MAP_FAILED
#define MAP_FAILED (-1)
#endif
#if defined(__minix__)
#define NO_MPROTECT
#endif

typedef int (*fnptr)(char* memory);
fnptr code = 0;
size_t codelen;

static void
link_and_run(dasm_State ** state)
{
    char   *codeptr;
    size_t  size;
    int     dasm_status = dasm_link(state, &size);
    if (dasm_status != DASM_S_OK) {
	fprintf(stderr, "Process dasm_link() failed\n");
	exit(1);
    }

#if !defined(LEGACYOS) && !defined(_WIN32)
#ifdef MAP_ANONYMOUS
    /* I allocate this with a 'PROT_EXEC' flag set so the kernel can choose
     * to put it in the 'code area' if there is such a thing (i386) */
    codeptr =
	(char *) mmap(NULL, size,
#ifdef NO_MPROTECT
		      PROT_WRITE |
#endif
		      PROT_READ | PROT_EXEC,
		      MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
#else
    /* This'll probably only work with Linux ... Oh, FreeBSD too. */
    {
	int fd = open("/dev/zero", O_RDWR);
	if (fd >= 0) {
	    codeptr =
		(char *) mmap(NULL, size,
#ifdef NO_MPROTECT
			      PROT_WRITE |
#endif
			      PROT_READ | PROT_EXEC, MAP_PRIVATE, fd, 0);
	    close(fd);
	} else
	    codeptr = MAP_FAILED;
    }
#endif
    if (codeptr == MAP_FAILED) {
	perror("Unable to allocate memory for executable");
	exit(1);
    }

#ifndef NO_MPROTECT
    if (mprotect(codeptr, size, PROT_WRITE | PROT_READ) != 0) {
	perror("mprotect to enable code writing");
    };
#endif
#elif defined(_WIN32)
    codeptr = (char*) VirtualAlloc(0, size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (!codeptr) {
	perror("Unable to allocate executable memory");
	exit(1);
    }
#else
    codeptr = malloc(size);
#endif
    codelen = size;

    dasm_encode(state, codeptr);
    dasm_free(state);

#if !defined(LEGACYOS) && !defined(_WIN32) && !defined(NO_MPROTECT)
    if (mprotect(codeptr, size, PROT_EXEC | PROT_READ) != 0) {
	if (verbose)
	    perror("mprotect read only");
    };
#elif defined(_WIN32)
    DWORD oldProt = 0;
    if (!VirtualProtect(codeptr, size, PAGE_EXECUTE_READ, &oldProt)) {
	if (verbose)
	    perror("VirtualProtect read only failed");
    }
#endif

    /* Write generated machine code to a temporary file.
    // View with:
    //  objdump -D -b binary -mi386 -Mx86,intel code.bin
    //  objdump -D -b binary -mi386 -Mx86-64,intel --adjust-vma=0x777777777000 code.bin
    // or
    //  ndisasm -b32 -o 0x77777000 /tmp/code-dasm.bin
    //  ndisasm -b64 -o 0x777777777000 /tmp/code-dasm.bin
    */
    if (dump_code)
    {
	const char *fname = "/tmp/code-dasm.bin";
	FILE   *f = fopen(fname, "w");
	fwrite(codeptr, size, 1, f);
	fclose(f);
	fprintf(stderr, "Dynasm "CPUID" code dumped to file '%s'\n", fname);
	fprintf(stderr, "codeptr = 0x%lx\n", (unsigned long) codeptr);
	fprintf(stderr, "putch   = 0x%lx\n", (unsigned long) &putch);
	fprintf(stderr, "getch   = 0x%lx\n", (unsigned long) &getch);
	fprintf(stderr, "failout = 0x%lx\n", (unsigned long) &failout);
    }

    if (verbose)
	fprintf(stderr, "Compiled %d bytes of "CPUID" Dynasm code, running.\n", (int)codelen);

    /* The C99 standard leaves casting from "void *" to a function
       pointer undefined.  The assignment used below is the POSIX.1-2003
       (Technical Corrigendum 1) workaround; see the Rationale for the
       POSIX specification of dlsym(). */
					     /* -- Linux man page dlsym() */
    *(void **) (&code) = codeptr;
    start_runclock();
    code(map_hugeram());
    finish_runclock(&run_time, &io_time);

    if (verbose>1)
	fprintf(stderr, "Run complete\n");

#if !defined(LEGACYOS) && !defined(_WIN32)
    if (munmap(codeptr, codelen) != 0)
	if (verbose)
	    perror("munmap(code..)");
#elif defined(_WIN32)
    (void)VirtualFree(codeptr, 0, MEM_RELEASE);
#else
    free(codeptr);
#endif
}
