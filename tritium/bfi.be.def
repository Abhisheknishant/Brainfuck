/*
Preprocessor abuse; all the modifications to the main bfi.c for adding
backends are brought here in one place. To add another backend just add
it to the list and fill in it's entry.
*/

#ifdef NO_EXT_BE
#undef XX
#else

#if XX == 0
#include "bfi.ccode.h"
#include "bfi.gnulit.h"
#include "bfi.nasm.h"
#include "bfi.bf.h"
#include "bfi.dc.h"
#include "bfi.dd.h"
#include "bfi.dasm.h"
#else

#define Nothing_Here /* TCC-0.9.27 needs a something in a argument of a
		      * preprocessor macro, as this seems like a likely
		      * bug for other compilers I've added a macro that
		      * is something but compiles to nothing. */
#if XX == 1
/* The enum */
#define X(a,b,c,d,e,f) c_ ## a,
#elif XX == 2
/* Help text */
#define X(a,b,c,d,e,f) c
#elif XX == 3
/* Option flags */
#define X(a,b,c,d,e,f) d
#elif XX == 4
/* Defaults */
#define X(a,b,c,d,e,f)
#elif XX == 5
/* Print code */
#define X(a,b,c,d,e,f) e
#elif XX == 6
/* Last Option Limits */
#define X(a,b,c,d,e,f)
#elif XX == 7
/* Run directly */
#define X(a,b,c,d,e,f) f
#elif XX == 8
/* Comma strings */
#define X(a,b,c,d,e,f) ,#a
#elif XX == 9
/* Call option func. */
#define X(a,b,c,d,e,f)
#else
#define X(a,b,c,d,e,f)
#endif

#if XX == 6
    /* Generators normally generate code with a fixed cell size. */
    if (cell_size == 0 && do_codestyle != c_default &&
	    do_codestyle != c_dc && do_codestyle != c_dd &&
	    do_codestyle != c_ccode && do_codestyle != c_bf)
	set_cell_size(-1);
#endif

/****************************************************************************/
#ifndef DISABLE_DYNASM
X(dynasm,DYNASM,
    printf("   -q   Run using the Dynasm interpreter/assembler.\n");    ,
    case 'q': do_codestyle = c_dynasm; break;                ,
    /* Cannot do print_dynasm() */                                     ,
    case c_dynasm: run_dynasm(); break;                               )
#if XX == 4
    if (do_run == -1 && do_codestyle == c_default &&
	    (cell_length==0 || cell_size>0) &&
	    verbose<3 && !enable_trace && !debug_mode && dynasm_ok) {
	do_run = 1;
	do_codestyle = c_dynasm;
    }
    if (do_codestyle == c_dynasm && do_run == -1) do_run = 1;
    if (do_codestyle == c_dynasm && cell_length>0 && cell_size == 0) {
	fprintf(stderr, "The DynASM generator does not support that cell size\n");
	exit(255);
    }
#endif
#if XX == 9
    {	int f = checkarg_dynasm(opt, arg);
	if (f) return f;
    }
#endif
#endif

/****************************************************************************/
#ifndef DISABLE_GNULIGHTNING
X(gnulightning,GNULIGHTNING,
    printf("   -j   Run using the GNU lightning interpreter/assembler.\n");    ,
    case 'j': do_codestyle = c_gnulightning; break;                ,
    /* Cannot do print_gnulightning() */                                     ,
    case c_gnulightning: run_gnulightning(); break;                               )
#if XX == 4
    if (do_run == -1 && do_codestyle == c_default &&
	    (cell_length==0 || cell_size>0) &&
	    verbose<3 && !enable_trace && !debug_mode && gnulightning_ok) {
	do_run = 1;
	do_codestyle = c_gnulightning;
    }
    if (do_codestyle == c_gnulightning && do_run == -1) do_run = 1;
    if (do_codestyle == c_gnulightning && cell_length>0 && cell_size == 0) {
	fprintf(stderr, "The GNU Lightning generator does not support that cell size\n");
	exit(255);
    }
#endif
#endif

/****************************************************************************/
#if !defined(DISABLE_TCCLIB) || !defined(DISABLE_DLOPEN)
X(ccode,CCODE,
    printf("   -c   Create C code. If combined with -r the code is loaded and run.\n");   ,
    case 'c': do_codestyle = c_ccode; break;			  ,
    case c_ccode: print_ccode(stdout); break;			    ,
    case c_ccode: run_ccode(); break;                               )

#if (XX == 4) && !defined(DISABLE_RUNC)
    if (do_run == -1 && do_codestyle == c_default && verbose<3
	&& (cell_length == 0 || !!strcmp(cell_type, "C"))) {
	do_run = 1;
	do_codestyle = c_ccode;
    }
#endif
#else
X(ccode,CCODE,
    printf("   -c   Create C code.\n");				    ,
    case 'c': do_codestyle = c_ccode; break;			    ,
    case c_ccode: print_ccode(stdout); break;			    ,
    Nothing_Here						    )
#endif

#if XX == 4
    if (do_codestyle == c_ccode &&
	    cell_length>0 && cell_size == 0 && !strcmp(cell_type, "C")) {
	fprintf(stderr, "The C generator does not support that cell size\n");
	exit(255);
    }
#endif
#if XX == 9
    {	int f = checkarg_ccode(opt, arg);
	if (f) return f;
    }
#endif

/****************************************************************************/
X(nasm,NASM,
    printf("   -s   Create i386 Linux ELF NASM code.\n");           ,
    case 's': do_codestyle = c_nasm; break;                         ,
    case c_nasm: print_nasm(); break;                               ,
    Nothing_Here						    )
#if XX == 4
    if (do_codestyle == c_nasm)
    {
	if (cell_length && cell_size != 8) {
	    fprintf(stderr, "The -s option only supports 8 bit cells.\n");
	    exit(255);
	}
	set_cell_size(8);
	if (!default_io && iostyle != 2) {
	    fprintf(stderr, "The -s option only supports binary I/O.\n");
	    exit(255);
	}
	iostyle = 2;
    }
#endif
#if XX == 9
    {	int f = checkarg_nasm(opt, arg);
	if (f) return f;
    }
#endif

/****************************************************************************/
X(bf,BF,
    printf("   -F   Attempt to regenerate BF code. (This disables a lot of optimisations.)\n");,
    case 'F': do_codestyle = c_bf; hard_left_limit = 0; break;      ,
    case c_bf: print_bf(); break;                                   ,
    Nothing_Here						    )
#if XX == 4
    if (do_codestyle == c_bf) {
	opt_no_calc = opt_no_endif = opt_no_litprt = 1;
	opt_regen_mov = 0;

	if (!default_io) {
	    fprintf(stderr, "The -F option only supports default I/O.\n");
	    exit(255);
	}
    }
#endif
#if XX == 9
    {	int f = checkarg_bf(opt, arg);
	if (f) return f;
    }
#endif

/****************************************************************************/
X(dc,DC,
    printf("   -D   Create code for dc(1).\n");
    printf("   -nov7   Disable Unix V7 dc(1) support.\n");          ,
    case 'D': do_codestyle = c_dc; break;                           ,
    case c_dc: print_dc(); break;                                   ,
    Nothing_Here						    )
#if XX == 4
    if (do_codestyle == c_dc) {
	if (eofcell == 0 && do_codestyle == c_dc && input_string == 0)
	    eofcell = 6;
	if (!default_io && iostyle != 2) {
	    fprintf(stderr, "The -D option only supports binary I/O.\n");
	    exit(255);
	}
	iostyle = 2;
    }
#endif
#if XX == 9
    {	int f = checkarg_dc(opt, arg);
	if (f) return f;
    }
#endif

/****************************************************************************/
X(dd,DD,
    printf("   -d   Code for be-pipe of bf2any\n");,
    case 'd': do_codestyle = c_dd; break;			    ,
    case c_dd: print_dd(); break;                                   ,
    Nothing_Here                                                    )


/****************************************************************************/

#undef X
#endif /*XX==?*/
#undef XX
#endif /*NO_EXT_BE*/
