/*
Preprocessor abuse; all the modifications to the main bfi.c for adding
backends are brought here in one place. To add another backend just add
it to the list and fill in it's entry.
*/

#ifdef NO_EXT_BE
#undef XX
#else

#if XX == 0
#include "bfi.ccode.h"
#include "bfi.gnulit.h"
#include "bfi.nasm.h"
#include "bfi.bf.h"
#include "bfi.dc.h"
#include "bfi.dasm.h"
#else

#if XX == 1
/* The enum */
#define X(a,b,c,d,e,f) c_ ## a,
#elif XX == 2
/* Help text */
#define X(a,b,c,d,e,f) c
#elif XX == 3
/* Option flags */
#define X(a,b,c,d,e,f) d
#elif XX == 4
/* Defaults */
#define X(a,b,c,d,e,f)
#elif XX == 5
/* Print code */
#define X(a,b,c,d,e,f) e
#elif XX == 6
/* Opt Limits */
#define X(a,b,c,d,e,f)
#elif XX == 7
/* Run directly */
#define X(a,b,c,d,e,f) f
#elif XX == 8
/* Comma strings */
#define X(a,b,c,d,e,f) ,#a
#elif XX == 9
/* Call option func. */
#define X(a,b,c,d,e,f)
#else
#define X(a,b,c,d,e,f)
#endif

/****************************************************************************/
#ifndef DISABLE_DYNASM
X(dynasm,DYNASM,
    printf("   -q   Run using the Dynasm interpreter/compiler.\n");    ,
    case 'q': do_codestyle = c_dynasm; break;                ,
    /* Cannot do print_dynasm() */                                     ,
    case c_dynasm: run_dynasm(); break;                               )
#if XX == 4
    if (do_run == -1 && do_codestyle == c_default &&
	    verbose<3 && !enable_trace && !debug_mode && dynasm_ok) {
	do_run = 1;
	do_codestyle = c_dynasm;
    }
    if (do_codestyle == c_dynasm && do_run == -1) do_run = 1;
#endif
#if XX == 9
    {	int f = checkarg_dynasm(opt, arg);
	if (f) return f;
    }
#endif
#endif

/****************************************************************************/
#ifndef DISABLE_GNULIGHTNING
X(gnulightning,GNULIGHTNING,
    printf("   -j   Run using the GNU lightning interpreter/compiler.\n");    ,
    case 'j': do_codestyle = c_gnulightning; break;                ,
    /* Cannot do print_gnulightning() */                                     ,
    case c_gnulightning: run_gnulightning(); break;                               )
#if XX == 4
    if (do_run == -1 && do_codestyle == c_default &&
	    verbose<3 && !enable_trace && !debug_mode && gnulightning_ok) {
	do_run = 1;
	do_codestyle = c_gnulightning;
    }
    if (do_codestyle == c_gnulightning && do_run == -1) do_run = 1;
#endif
#endif

/****************************************************************************/
#if !defined(DISABLE_TCCLIB) || !defined(DISABLE_DLOPEN)
X(ccode,CCODE,
    printf("   -c   Create C code. If combined with -r the code is loaded and run.\n");   ,
    case 'c': do_codestyle = c_ccode; break;			  ,
    case c_ccode: print_ccode(stdout); break;			    ,
    case c_ccode: run_ccode(); break;                               )

#if XX == 4
    if (do_run == -1 && do_codestyle == c_default && verbose<3 && !debug_mode) {
	do_run = 1;
	do_codestyle = c_ccode;
    }
#endif
#else
X(ccode,CCODE,
    printf("   -c   Create C code.\n");				    ,
    case 'c': do_codestyle = c_ccode; break;			    ,
    case c_ccode: print_ccode(stdout); break;			    ,
    /* No direct run */						    )
#endif
#if XX == 9
    {	int f = checkarg_ccode(opt, arg);
	if (f) return f;
    }
#endif

/****************************************************************************/
X(nasm,NASM,
    printf("   -s   Create i386 Linux ELF NASM code.\n");           ,
    case 's': do_codestyle = c_nasm; break;                         ,
    case c_nasm: print_nasm(); break;                               ,
    /* No direct run */						    )
#if XX == 4
    if (do_codestyle == c_nasm)
    {
	if (cell_size && cell_size != 8) {
	    fprintf(stderr, "The -s option only supports 8 bit cells.\n");
	    exit(255);
	}
	set_cell_size(8);
    }
#endif

/****************************************************************************/
X(bf,BF,
    printf("   -F   Attempt to regenerate BF code.\n");             ,
    case 'F': do_codestyle = c_bf; hard_left_limit = 0; break;      ,
    case c_bf: print_bf(); break;                                   ,
    /* No direct run */						    )
#if XX == 6
    if (do_codestyle == c_bf)
	opt_no_calc = opt_no_endif = opt_no_litprt = opt_no_repoint = 1;
#endif

/****************************************************************************/
X(dc,DC,
    printf("   -D   Create code for dc(1).\n");
    printf("   -nov7   Disable Unix V7 dc(1) support.\n");          ,
    case 'D': do_codestyle = c_dc; break;                           ,
    case c_dc: print_dc(); break;                                   ,
    /* No direct run */						    )
#if XX == 4
    if (eofcell == 0 && do_codestyle == c_dc && input_string == 0)
	eofcell = 6;
#endif
#if XX == 9
    {	int f = checkarg_dc(opt, arg);
	if (f) return f;
    }
#endif

/****************************************************************************/

#undef X
#endif /*XX==?*/
#undef XX
#endif /*NO_EXT_BE*/
